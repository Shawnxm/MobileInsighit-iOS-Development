#ifndef _OBJC_NSOBJECT_H_#define _OBJC_NSOBJECT_H_#if __OBJC__#include <objc/objc.h>#include <objc/NSObjCRuntime.h>@class NSString, NSMethodSignature, NSInvocation;// 协议定义部分@protocol NSObject- (BOOL)isEqual:(id)object;// 首先判断两个对象是否类型一致，  再判断具体内容是否一致@property (readonly) NSUInteger hash;// 返回一个整数，可以用来作为哈希表结构中的表地址@property (readonly) Class superclass;// 返回超类对象- (Class)class OBJC_SWIFT_UNAVAILABLE("use 'anObject.dynamicType' instead");// 返回类对象- (instancetype)self;// 返回当前对象- (id)performSelector:(SEL)aSelector;// 将指定的消息配送到接收器，应用aSelector指定的消息,相当于方法调用- (id)performSelector:(SEL)aSelector withObject:(id)object;// 将对象消息配送到接收器，应用aSelector指定的消息- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;// 将2个对象消息配送到接收器，应用aSelector指定的消息- (BOOL)isProxy;// 判断是否接收器是否从NSObject继承- (BOOL)isKindOfClass:(Class)aClass;//判断是否是这个类或者这个类的子类的实例- (BOOL)isMemberOfClass:(Class)aClass;判断是否是这个类的实例- (BOOL)conformsToProtocol:(Protocol *)aProtocol;判断是否符合协议- (BOOL)respondsToSelector:(SEL)aSelector;判断是否实现了某方法/* 5个方法只在MRC下使用 **/- (instancetype)retain OBJC_ARC_UNAVAILABLE;增加对象的计数器- (oneway void)release OBJC_ARC_UNAVAILABLE;减少对象的计数器- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;自动减少对象的计数器，但是以推迟的方式来实现- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;返回一个对象当前的计数器- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;垃圾自动回收@property (readonly, copy) NSString *description;// 允许一个对象返回一个字符串来描述它的内容,常用于调试@optional@property (readonly, copy) NSString *debugDescription;// 返回一个字符串，描述在调试器中的接收器演示的内容@end// 定义部分__OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0)OBJC_ROOT_CLASSOBJC_EXPORT@interface NSObject <NSObject> {    Class isa  OBJC_ISA_AVAILABILITY;}+ (void)load;初始化加载，在runtime时加载到内存，且只会调用一次+ (void)initialize;初始化对象，可能调用多次- (instancetype)init//初始化对象，分配内存#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZERNS_DESIGNATED_INITIALIZER#endif;+ (instancetype)new OBJC_SWIFT_UNAVAILABLE("use object initializers instead");// 分配一个新的接收类实例，并将它发送一个init消息，并返回初始化的对象。基本不用，initialize方法代替+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE("use object initializers instead");//在内存中为一个对象分配了内存空间并且设置它指向的对象的编译器类定义，返回该实例。+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE("use object initializers instead");//在内存中为一个对象分配了内存空间并且设置它指向的对象的编译器类定义，返回该实例。- (void)dealloc OBJC_SWIFT_UNAVAILABLE("use 'deinit' to define a de-initializer");//应用于类来释放对象实例变量并释放动态内存- (void)finalize;//在垃圾收集器运行期间进行一些特殊的工作.- (id)copy;//复制任意对象的内存- (id)mutableCopy;//复制可变对象+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;// 复制任意对象的内存，深复制， 标记自动内存释放是否可用,只在ARC使用+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;//复制易变的对象  标记自动内存释放是否可用,只在ARC使用+ (BOOL)instancesRespondToSelector:(SEL)aSelector;// 测试了一个给定的类实例化之后， 是否实现了一个指定的方法+ (BOOL)conformsToProtocol:(Protocol *)protocol;// 测试接收器（对象或者类）符合一个给定的协议（protocol）- (IMP)methodForSelector:(SEL)aSelector;// 一个获取指向方法实现IMP的指针+ (IMP)instanceMethodForSelector:(SEL)aSelector;// 返回的实施地址选择器- (void)doesNotRecognizeSelector:(SEL)aSelector;// 处理消息接收- (id)forwardingTargetForSelector:(SEL)aSelector __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0);// 转发消息- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE("");// 允许一个对象把消息转发给另一个对象- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE("");// 判断消息fun是否注册+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE("");// 获得类和方法的签名- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;// 允许弱参考引用标量- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;保留弱参照变量+ (BOOL)isSubclassOfClass:(Class)aClass;判断对象是否是指定类的子类+ (BOOL)resolveClassMethod:(SEL)sel __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0);动态方法解析+ (BOOL)resolveInstanceMethod:(SEL)sel __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0);动态方法解析+ (NSUInteger)hash;+ (Class)superclass;+ (Class)class OBJC_SWIFT_UNAVAILABLE("use 'aClass.self' instead");+ (NSString *)description;+ (NSString *)debugDescription;@end#endif#endif